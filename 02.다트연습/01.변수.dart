// 01. 다트문법 1 : 변수사용하기

// 로딩이 될때 제일 먼저 실행됨(main)
// void는 리턴값이 없다는 표시
void main(List<String> args){
  // [1. var 선언변수]
  // var는 할당되는 값으로 형이 결정되는 자유로운 변수 선언형식이다
  // 단, 처음에 할당한 형식으로만 재할당 가능
  var myHome="내집!";
  // 출력은 print()
  print(myHome);
  // cs언어는 세미콜론 필수!
  // var 선언변수는 재할당 가능할까?
  // myHome =32;
  // 처음에 넣은 데이터 형과 다른형은 할당불가
  myHome="너의 집이다!";
  print(myHome);

  // [2.dynamic 선언변수]
  // -> var 와 유사하게 다양한 데이터형 할당 가능
  // 단, 처음할당 형과 다른 형을 넣어도 괜찮음
  dynamic myId="hhh1234";
  print("나의 아이디는? $myId");
  myId=7878778;
  print("나의 아이디는? $myId");

  // [문자형 안에 코드 출력법 : '${코드}']
  // [문자형 안에 변수 출력법 : '$변수']

  // [ 다트언어의 데이터 형 ] //
  // 다트언어는 CS언어이기 때문에 변수형 선언이 기본임
  // 1. 숫자형 : 
  // int - 정수 / double - 실수 / num - 정수/실수
  int number1=2024;
  // 재할당 가능한가?
  number1=111;
  print('정수형: $number1');
  // 형이 다른 숫자를 재할당하면
  // number1=3.14552; <<<형이 다르면 에러
  // print('정수형: $number1');
  
  // 실수형은 double
  // 실수형은 정수를 넣어도 실수형으로 저장됨 >>>> 예 7을 넣으면 7.0으로 나옴
  double number2=3.14552;
  print('실수형: $number2');

  // 정수/실수를 모두 포괄하는 형은 num 
  num number3=100;
  print('num형: $number3');
  number3=7.245;
  print('num형: $number3');

/////////////////////////////////////
  // 2. 문자형 : String
  String name="랄라";
  print("룰룰 $name");

  // 3. 불린형 : bool
  bool isTrue=true;
  print("true/false: $isTrue");

  /******************************************************************************* 
   [ 제네릭(Generic)이란 ]
   - List 나 Set 또는 Map집합데이터 형을 지정할때 내부 데이터 형을 정해주는 방법이다. 
   - 일반화하다라는 단어 General과 같은 계열의 단어인 Generic을 사용하여 부른다.

   - List<제네릭> / Set<제네릭> / Map<제네릭>
   - 참고 : https://dart-ko.dev/language/generics
   *******************************************************************************/

  // 4. 콜렉션 : 묶음데이터
  // List / Set / Map
  // 4-1. List 형 - 배열과 유사함
  List<String> we =['너','나','우리']; //<<<<<<<<<<<문자형만 가능!!
  // 아래와 같이 제네릭을 이퀄 뒤에 표기가능
  // var we =<String>['너','나','우리']; 
  // 만약 다양한 형으로 사용할 경우 dynamic형을 사용함
  // >>>>>>>>>>>>>>>>> List<dynamic> we2 =['너','나','우리',3];
  // 처음에 형을 var나 dynamic형으로 리스트형을 만들 수 있다!
  // >>>>>>>>>>>>>>>>>> var me=["gkgk","dsada",2,3.455];
  // >>>>>>>>>>>>>>>>>> dynamic me = ["gkgk","dsada",2,3.455];

  // 데이터 추가
  we.addAll(["형","동생","누나","언니"]);
  we.add("형수");
  print(we);

  print(we[2]+"는 친구야");
  print(we[2]+we[1]);
  // List형의 길이는 length를 사용한다.
  print("List의 개수:"+ we.length.toString());
  // 일반 더하기로 문자형에 숫자를 더하면 에러남
  // >>>>왜???!? 문자형과 숫자형은 더할 수 없으니까 >>>> 숫자형을 문자형으로 형변환해야함(캐스팅)

  // 4-2. Set형 : 중복없는 배열과 유사>>> 다만 중괄호 사용
  // -> 순서가 없고 중복되지 않는 데이터 집함
  // -> 순서가 없으므로 호출에서 사용하고자 할때에는 List형으로 변환 후 사용한다.
  // >>>>> Set형변수.toList();
  // Set<int> evens ={2,4,6,8,4,12,8,10};
  Set<dynamic> evens ={2,4,6,8,4,12,8,10,"짝수"};
  // var evens ={2,4,6,8,4,12,8,10,"짝수"};
  print("짝수 Set : $evens");
  // 리스트형으로 형변환
  print("짝수 셋 리스트형 변환 : ${evens.toList()}");
  // 리스트변환후 순번으로 출력가능
  print("짝수 셋 리스트형 변환후 순번출력 : ${evens.toList()[6]}");
  // 4-3. Map형 : 데이터에 라벨링된 데이터 집합(JS객체와 유사)



}/////////////////////////main메서드///////////////////////////////////